The ``base_geometry`` module
======================

Using ``base_geometry``
-------------------


First import ``base_geometry`` from the ``7-base_geometry`` file:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Tests:

# Create an instance
>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

>>> bg.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator("age")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator("age", 34)

>>> bg.integer_validator("age", "10")
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("size", -10)
Traceback (most recent call last):
...
ValueError: size must be greater than 0

>>> bg.integer_validator("height", 10.5)
Traceback (most recent call last):
...
TypeError: height must be an integer

>>> bg.integer_validator("size", None)
Traceback (most recent call last):
...
TypeError: size must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
...
ValueError: age must be greater than 0

>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("age", [3])
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("age", True)
Traceback (most recent call last):
...
TypeError: age must be an integer

>>> bg.integer_validator("age", {3, 4})
Traceback (most recent call last):
...
TypeError: age must be an integer